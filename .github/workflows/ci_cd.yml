name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  FLUTTER_VERSION: '3.19.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: Install dependencies
        working-directory: frontend
        run: flutter pub get
      
      - name: Run analyzer
        working-directory: frontend
        run: flutter analyze
      
      - name: Run tests
        working-directory: frontend
        run: flutter test

  build:
    name: Build Application
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
      
      - name: Enable platform
        working-directory: frontend
        run: flutter config --enable-${{ matrix.platform }}-desktop
      
      - name: Install dependencies
        working-directory: frontend
        run: flutter pub get
      
      - name: Build application
        working-directory: frontend
        run: ./scripts/build/build_env.sh --platform=${{ matrix.platform }} --env=${{ github.event.inputs.environment || 'development' }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plantarium-${{ matrix.platform }}
          path: |
            frontend/build/windows/*/Release/*
            frontend/build/linux/*/release/*
            frontend/build/macos/Build/Products/Release/*
          if-no-files-found: ignore

  deploy:
    name: Deploy Application
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Display structure of downloaded files
        run: ls -R
      
      - name: Deploy to development
        if: github.event.inputs.environment == 'development' || github.ref == 'refs/heads/development'
        run: echo "Deploying to development environment"
        # Add actual deployment steps for development
      
      - name: Deploy to staging
        if: github.event.inputs.environment == 'staging'
        run: echo "Deploying to staging environment"
        # Add actual deployment steps for staging
      
      - name: Deploy to production
        if: github.event.inputs.environment == 'production' && github.ref == 'refs/heads/main'
        run: echo "Deploying to production environment"
        # Add actual deployment steps for production 